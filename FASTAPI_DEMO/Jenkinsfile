pipeline {
  agent {
    kubernetes {
      label 'kaniko-agent'
      defaultContainer 'kaniko'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: kaniko-build
  namespace: obs-test-ns
spec:
  restartPolicy: Never
  nodeSelector:
    kubernetes.io/os: "linux"
  volumes:
    - name: workspace
      emptyDir: {}
    - name: kaniko-secret
      secret:
        secretName: docker-config
  initContainers:
    - name: git-clone
      image: alpine/git
      command: ["git", "clone", "--branch=main", "https://github.com/skundu1234/jenkins-webhook-test.git", "/workspace"]
      volumeMounts:
        - name: workspace
          mountPath: /workspace
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:latest
      args:
        - "--context=/workspace/FASTAPI_DEMO"
        - "--dockerfile=/workspace/FASTAPI_DEMO/Dockerfile"
        - "--destination=docker.io/skundu1234/fastapi-demo:build-${BUILD_NUMBER}"
        - "--verbosity=info"
      volumeMounts:
        - name: workspace
          mountPath: /workspace
        - name: kaniko-secret
          mountPath: /kaniko/.docker
    - name: sonar
      image: sonarsource/sonar-scanner-cli:latest
      command:
        - cat
      tty: true
      volumeMounts:
        - name: workspace
          mountPath: /workspace
"""
    }
  }

  environment {
    DOCKER_IMAGE = "docker.io/skundu1234/fastapi-demo:build-${BUILD_NUMBER}"
  }

  stages {
    stage('SonarQube Analysis') {
      steps {
        container('sonar') {
          withSonarQubeEnv('My SonarQube Server') {
            sh '''
              sonar-scanner \
                -Dsonar.projectKey=fastapi-demo \
                -Dsonar.sources=/workspace/FASTAPI_DEMO \
                -Dsonar.host.url=http://my-sonarqube-sonarqube.obs-test-ns.svc.cluster.local:9000 \
                -Dsonar.login=${SONAR_TOKEN}
            '''
          }
        }
      }
    }

    stage('Build & Push Image') {
      steps {
        echo "üöÄ Kaniko is building: ${DOCKER_IMAGE}"
      }
    }
  }

  post {
    success {
      echo "‚úÖ Image successfully pushed to ${DOCKER_IMAGE}"
    }
    failure {
      echo "‚ùå Build failed. Check logs for details."
    }
    always {
      echo "üì¶ Pipeline finished running."
    }
  }
}
