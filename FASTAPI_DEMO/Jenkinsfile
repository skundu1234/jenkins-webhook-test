pipeline {
  agent {
    kubernetes {
      label 'kaniko-agent'
      defaultContainer 'kaniko'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: kaniko-build
  namespace: obs-test-ns
spec:
  restartPolicy: Never
  nodeSelector:
    kubernetes.io/os: "linux"
  volumes:
    - name: workspace
      emptyDir: {}
    - name: kaniko-secret
      secret:
        secretName: docker-config  # Replace with your Docker registry secret name
  initContainers:
    - name: git-clone
      image: alpine/git
      command: ["git", "clone", "--branch=main", "https://github.com/skundu1234/jenkins-webhook-test.git", "/workspace"]
      volumeMounts:
        - name: workspace
          mountPath: /workspace
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:latest
      args:
        - "--context=/workspace/FASTAPI_DEMO"
        - "--dockerfile=/workspace/FASTAPI_DEMO/Dockerfile"
        - "--destination=docker.io/skundu1234/fastapi-demo:latest"  # Replace with your image name
        - "--verbosity=info"
      volumeMounts:
        - name: workspace
          mountPath: /workspace
        - name: kaniko-secret
          mountPath: /kaniko/.docker
"""
    }
  }

  stages {
    stage('Build & Push with Kaniko') {
      steps {
        container('kaniko') {
          sh 'echo "üî• Starting Kaniko build"'
          // This step is not necessary since Kaniko is run in the container's args
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Image pushed to docker.io/skundu1234/fastapi-demo:latest"
    }
    failure {
      echo "‚ùå Build failed. Check Kaniko logs for details."
    }
    always {
      echo "üì¶ Jenkins pipeline finished running Kaniko"
    }
  }
}